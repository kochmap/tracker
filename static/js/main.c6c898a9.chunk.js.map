{"version":3,"sources":["components/Map.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["CENTER_OF_WARSAW","calculateDigest","value","a","msgUint8","TextEncoder","encode","crypto","subtle","digest","hashBuffer","hashArray","Array","from","Uint8Array","map","b","toString","padStart","join","checkDigestAndFetchTracking","apiUrl","apiKey","setTracking","apiUrlDigest","apiKeyDigest","fetch","method","headers","response","json","body","tracking","Map","useState","useEffect","MapContainer","center","zoom","style","height","width","TileLayer","url","attribution","t","Marker","position","parseFloat","lat","lon","icon","Icon","iconUrl","markerIconPng","iconSize","iconAnchor","Popup","line","timestamp","brigade","App","args","window","location","hash","substr","split","reduce","acc","v","Object","assign","API_URL","API_KEY","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAUMA,EAAqC,CAAC,QAAS,SAe/CC,EAAmD,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACpDC,GAAW,IAAIC,aAAcC,OAAOJ,GADgB,SAEjCK,OAAOC,OAAOC,OAAO,UAAWL,GAFC,cAEpDM,EAFoD,OAGpDC,EAAYC,MAAMC,KAAK,IAAIC,WAAWJ,IAHc,kBAInDC,EAAUI,KAAI,SAACC,GAAD,OAAOA,EAAEC,SAAS,IAAIC,SAAS,EAAG,QAAMC,KAAK,KAJR,2CAAH,sDAQnDC,EAAsI,uCAAG,WAAOC,EAAQC,EAAQC,GAAvB,qBAAApB,EAAA,sEAClHF,EAAgBoB,GADkG,cACvIG,EADuI,gBAElHvB,EAAgBqB,GAFkG,UAEvIG,EAFuI,OAzBjH,qEA4BxBD,GA3BwB,qEA2BkBC,EAH+F,iCAIpHC,MAAML,EAAQ,CACnCM,OAAQ,MACRC,QAAS,CACP,YAAaN,KAP0H,cAIrIO,EAJqI,iBAUvGA,EAASC,OAV8F,QAUrIC,EAVqI,OAW3IR,EAAYQ,EAAKC,UAX0H,4CAAH,0DAkD7HC,EAnC2C,SAAC,GAAwB,IAAtBZ,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,OACnE,EAAgCY,mBAAgC,MAAhE,mBAAOF,EAAP,KAAiBT,EAAjB,KAIA,OAHAY,qBAAU,WACRf,EAA4BC,EAAQC,EAAQC,KAC3C,CAACF,EAAQC,IACPU,EAEH,eAACI,EAAA,EAAD,CAAcC,OAAQrC,EAAkBsC,KAAM,GAAIC,MAAO,CAAEC,OAAQ,QAASC,MAAO,SAAnF,UACE,cAACC,EAAA,EAAD,CACEC,IAAI,qDACJC,YAAY,0FAEbZ,EAASjB,KAAI,SAAC8B,GAAD,OACZ,cAACC,EAAA,EAAD,CAEEC,SAAU,CAACC,WAAWH,EAAEI,KAAMD,WAAWH,EAAEK,MAC3CC,KAAM,IAAIC,OAAK,CACbC,QAASC,IACTC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,MANrB,SASE,eAACC,EAAA,EAAD,mBAEGZ,EAAEa,KACF,IAHH,UAKGb,EAAEc,cAdP,UACUd,EAAEa,KADZ,YACoBb,EAAEe,QADtB,YACiCf,EAAEc,kBATnB,MC5CTE,EANH,WACV,IAAMC,EAAOC,OAAOC,SAASC,KAAKC,OAAO,GAAGC,MAAM,KAAKpD,KAAI,SAACZ,GAAD,OAAOA,EAAEgE,MAAM,QAAMpD,KAAI,SAACZ,GAAD,sBAAWA,EAAE,GAAKA,EAAE,OACrGiE,QAAO,SAACC,EAAKC,GAAN,OAAYC,OAAOC,OAAOH,EAAKC,MACzC,OAAQ,cAAC,EAAD,CAAKjD,OAAQyC,EAAKW,QAASnD,OAAQwC,EAAKY,WCQnCC,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAEnB,IADLC,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c6c898a9.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport markerIconPng from 'leaflet/dist/images/marker-icon.png';\nimport 'leaflet/dist/leaflet.css';\nimport { Icon } from 'leaflet';\nimport {\n  MapContainer, Marker, Popup, TileLayer,\n} from 'react-leaflet';\n\nconst PROPER_API_URL_DIGEST = '51e6052fcb6d5a10daca21726d3269825988bcc85603e6ab7c52c51844789fe5';\nconst PROPER_API_KEY_DIGEST = 'c05cd4649c4418c70f7f70f83e0d6420978d623aff20be3eafcdba8304d44164';\nconst CENTER_OF_WARSAW: [number, number] = [52.2297, 21.0122];\n\ninterface AllTrackingJson {\n  tracking: [TrackingJson]\n}\n\ninterface TrackingJson {\n  lon: string\n  lat: string\n  line: string\n  brigade: string\n  timestamp: string\n}\n\n// eslint-disable-next-line no-unused-vars\nconst calculateDigest: (value: string) => Promise<string> = async (value) => {\n  const msgUint8 = new TextEncoder().encode(value);\n  const hashBuffer = await crypto.subtle.digest('SHA-256', msgUint8);\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  return hashArray.map((b) => b.toString(16).padStart(2, '0')).join('');\n};\n\n// eslint-disable-next-line no-unused-vars\nconst checkDigestAndFetchTracking: (apiUrl: string, apiKey: string, setTracking: (tracking: [TrackingJson] | null) => void) => Promise<void> = async (apiUrl, apiKey, setTracking) => {\n  const apiUrlDigest = await calculateDigest(apiUrl);\n  const apiKeyDigest = await calculateDigest(apiKey);\n  if (apiUrlDigest === PROPER_API_URL_DIGEST && apiKeyDigest === PROPER_API_KEY_DIGEST) {\n    const response = await fetch(apiUrl, {\n      method: 'GET',\n      headers: {\n        'X-API-KEY': apiKey,\n      },\n    });\n    const body: AllTrackingJson = await response.json();\n    setTracking(body.tracking);\n  }\n};\n\nconst Map: React.FC<{ apiUrl: string, apiKey: string }> = ({ apiUrl, apiKey }) => {\n  const [tracking, setTracking] = useState<[TrackingJson] | null>(null);\n  useEffect(() => {\n    checkDigestAndFetchTracking(apiUrl, apiKey, setTracking);\n  }, [apiUrl, apiKey]);\n  if (!tracking) return null;\n  return (\n    <MapContainer center={CENTER_OF_WARSAW} zoom={13} style={{ height: '100vh', width: '100wh' }}>\n      <TileLayer\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n      />\n      {tracking.map((t) => (\n        <Marker\n          key={`${t.line}-${t.brigade}-${t.timestamp}`}\n          position={[parseFloat(t.lat), parseFloat(t.lon)]}\n          icon={new Icon({\n            iconUrl: markerIconPng,\n            iconSize: [25, 41],\n            iconAnchor: [12, 41],\n          })}\n        >\n          <Popup>\n            Line:\n            {t.line}\n            {' '}\n            updated\n            {t.timestamp}\n          </Popup>\n        </Marker>\n      ))}\n    </MapContainer>\n  );\n};\n\nexport default Map;\n","import React from 'react';\nimport Map from './components/Map';\n\nconst App = () => {\n  const args = window.location.hash.substr(1).split('&').map((a) => a.split('=')).map((a) => ({ [a[0]]: a[1] }))\n    .reduce((acc, v) => Object.assign(acc, v));\n  return (<Map apiUrl={args.API_URL} apiKey={args.API_KEY} />);\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}